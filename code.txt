import { useState } from "react";
import axios from 'axios';

export default function Home() {
  const [inputValue, setInputValue] = useState('');
  const [chatLog, setChatLog] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = (event) => {
    event.preventDefault();
    setChatLog((prevChatLog) => [...prevChatLog, { type: 'user', message: inputValue }]);
    sendMessage(inputValue);
    setInputValue('');
  }

  const sendMessage = async (message) => {
    const url = "https://api.openai.com/v1/chat/completions";
    const headers = {
      'Content-type': 'application/json;charset=UTF-8',
      'Authorization': `Bearer ${process.env.NEXT_PUBLIC_OPENAI_API_KEY}`,
    };
    
    const data = {
      "model": "gpt-3.5-turbo",
      "messages": [
        { role: "user", content: message } // Use the message parameter
      ],
      "max_tokens": 45,
      "temperature": 0.7
    };
    
    const MAX_RETRIES = 5;
    let retryCount = 0;
    let delay = 1000; // initial delay of 1 second
  
    while (retryCount < MAX_RETRIES) {
      try {
        const response = await axios.post(url, data, { headers });
        setChatLog((prevChatLog) => [
          ...prevChatLog,
          { type: 'bot', message: response.data.choices?.[0].message?.content }
        ]);
        return; // exit the function if the request is successful
      } catch (error) {
        if (error.response && error.response.status === 429) {
          retryCount++;
          console.error(`Retrying... Attempt ${retryCount}`);
          await new Promise(res => setTimeout(res, delay));
          delay *= 2; // increase the delay for the next retry
        } else {
          console.error("Error message:", error.message);
          console.error("Error response:", error.response);
          break; // exit the loop if the error is not related to rate limiting
        }
      }
    }
    
    console.error("Max retries reached. Please try again later.");
  };
  

  return (
    <div className="container mx-auto max-w-[700px]">
      <div className="flex flex-col h-screen bg-gray-900">
        <h1 className="bg-gradient-to-r from-blue-500 to-purple-500 text-transparent bg-clip-text text-center py-3 font-bold text-6xl">Combank-ChatGPT</h1>
        <div className="flex-grow p-6">
          <div className="flex flex-col space-y-4">
            {
              chatLog.map((message, index) => (
                <div key={index} className={`flex ${message.type === 'user' ? 'justify-end' :'justify-start'}`}>
                  <div className={` ${message.type === 'user' ? 'bg-purple-500' : 'bg-gray-800'} rounded-lg p-4 text-white max-w-sm`}>
                    {message.message}
                  </div>
                </div>
              ))
            }
          </div>
        </div>
      
        <form onSubmit={handleSubmit}>
          <div className="flex rounded-lg border border-gray-700 bg-gray-800">
            <input type="text" className="flex-grow px-4 py-2 bg-transparent text-white focus:outline-none" placeholder="Type your message..." value={inputValue} onChange={(e) => setInputValue(e.target.value)} />
            <button className="bg-purple-500 rounded-lg px-4 py-2 font-semibold focus:outline-none hover:bg-purple-600 transition-colors duration-300" type="submit">Send</button>
          </div>
        </form>
      </div>
    </div>
  );
}
